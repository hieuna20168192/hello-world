# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2
      
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs: # we now have TWO jobs, so that a workflow can coordinate them!
  one: # This is your first job. 
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker: # It uses the docker executor
      - image: cimg/ruby:2.6.8 # specifically, a docker image with ruby 2.6.8
      auth:
        username: mydockerhub-user
        password: $DOCKERHUB_PASSWORD # context / project UI env-var reference
   
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    # Steps are a list of commands to run inside the docker container above.
    steps:
      - checkout # this pulls code down from GitHub
      - run: echo "A first hello" # This prints "A first hello" to stdout.
      - run: sleep 25 # a command telling the job to "sleep" for 25 seconds.
  two: # This is our second job. 
    docker: # it runs inside a docker image, the same as above. 
      - image: cimg/ruby:3.0.2
        auth:
          username: mydockerhub-user
          password: $DOCKERHUB_PASSWORD # context / project UI env-var reference. 
    steps: 
      - checkout
      - run: echo "A more familiar hi" # we run a similar echo command to above. 
      - run: sleep 15 # and then sleep for 15 seconds. 

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
# Under the workflows: map, we can coordinate our two jobs, defined above. 
workflows:
  version: 2
  one_and_two: # this is the name of our workflow
    jobs: # and here we list the jobs we are going to run. 
      - one 
      - two
